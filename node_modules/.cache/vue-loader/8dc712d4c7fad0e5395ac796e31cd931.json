{"remainingRequest":"D:\\Website\\tugasakhir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Website\\tugasakhir\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Website\\tugasakhir\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Website\\tugasakhir\\src\\pages\\Guidebook.vue?vue&type=template&id=0acdab71&","dependencies":[{"path":"D:\\Website\\tugasakhir\\src\\pages\\Guidebook.vue","mtime":1632654312000},{"path":"D:\\Website\\tugasakhir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Website\\tugasakhir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Website\\tugasakhir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Website\\tugasakhir\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}