{"remainingRequest":"D:\\Website\\ITFestival\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Website\\ITFestival\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Website\\ITFestival\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Website\\ITFestival\\src\\pages\\Index.vue?vue&type=template&id=4bc9d7de&","dependencies":[{"path":"D:\\Website\\ITFestival\\src\\pages\\Index.vue","mtime":1634831170796},{"path":"D:\\Website\\ITFestival\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Website\\ITFestival\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Website\\ITFestival\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Website\\ITFestival\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}